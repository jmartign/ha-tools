#!/bin/sh
#
# A tool to administer OCF resources directly.
#
# http://github.com/joekhoobyar/ha-tools
#
# Author:		Joe Khoobyar <joe@ankhcraft.com>
# License:	GNU General Public License (GPL) version 2
# Copyright (c) 2009 All Rights Reserved
#

version=0.1
progname=$(basename $0)

print_usage() {
	if [ -x "$agent_bin" ]; then
		$agent_bin help
	else
    cat <<EOF
Usage: $progname resource-agent [options] command [resource-id]

A tool to deal with errors in the CIB.

Resource Agent:

  A fully-qualified resource agent name, such as: heartbeat/IPaddr2

Options:
  -h, --help          print this usage message
  -V, --version       print program version
  -v, --verbose       verbose output
  -p, --param         OCF parameters, in the form:  name="value"

Commands:

  -M, --metadata      display the resource agent's metadata
  -C, --validate-all  validate the resource and it's configuration
  -m, --monitor       monitor the resource
  -s, --status        check the resource's status, a la an LSB initscript
  -A, --start         stop the resource
  -Z, --stop          start the resource
  -R, --reload        gracefully reload the resource
EOF
	fi
}

print_version()
{
    cat <<EOF
$progname (ha-tools) $version
Copyright (C) 2009 All Rights Reserved
Written by Joe Khoobyar <joe@ankhcraft.com>
EOF
}

print_error() {
	echo "$progname: error -" "$@" 1>&2
}

print_warning() {
	echo "$progname: warning -" "$@" 1>&2
}

die() {
	print_error "$@"
	exit 1
}

run_agent() {
	if [ -z "$2" ]; then
		[ -n "$CRM_CHECK" ] && die "option -c requires a resource instance name"
		env $agent_args $agent_bin $1
	elif [ "$1" != "status" ] && [ -n "$CRM_CHECK" ] && crm_resource -r "$2" -W -Q | grep -v $(crm_hostname); then
		print_warning "skipping $1: resource $2 is not running via the CRM"
	else
		env $agent_args OCF_RESOURCE_INSTANCE="$2" $agent_bin $1
	fi
}

: ${OCF_ROOT:=/usr/lib/ocf}
OCF_BIN=$OCF_ROOT/resource.d
export OCF_ROOT

# Check the resource agent for validity.  Try to auto-detect when not fully-qualified.
agent="$1"
shift
if [ -z "$agent" ]; then
	print_usage; exit 1
elif [ "$agent" != "${agent##*::}" ]; then
	agent_bin="$OCF_BIN/${agent//:://}"
	[ -x "$agent_bin" ] || die "no such resource agent \`$agent'"
elif [ -x "$OCF_BIN/heartbeat/$agent" ]; then
	agent="heartbeat::$agent"
	print_warning "guessing fully-qualified resource agent name: $agent"
	agent_bin="$OCF_BIN/${agent//:://}"
else
	agent=$(find $OCF_BIN -maxdepth 2 -mindepth 2 -name IPaddr2 -not -type d | sed -ne 's@^/usr/lib/ocf/resource.d/\([^/]\+\)/@\1::@p' | head -1)
	[ -z "$agent" ] && die "no such resource agent: $agent"
	print_warning "guessing fully-qualified resource agent name: $agent"
	agent_bin="$OCF_BIN/${agent//:://}"
fi

SHORTOPTS="hVvcp:MC:m:s:A:Z:r:R::"
LONGOPTS="help,version,verbose,check,param,metadata,validate-all,monitor,status,start,stop,reload,run"
if $(getopt -T >/dev/null 2>&1) ; [ $? = 4 ] ; then # New longopts getopt.
    OPTS=$(getopt -o $SHORTOPTS --long $LONGOPTS -n "$progname" -- "$@")
else
    case $1 in --help) print_usage; exit 0 ;; esac
    case $1 in --version) print_version ; exit 0 ;; esac
    OPTS=$(getopt $SHORTOPTS "$@")
fi 

[ "$OPTS" = " --" ] && OPTS=" -h --"

eval set -- "${OPTS}"

while [ $# -gt 0 ]; do
case $1 in
  -h|--help)
    print_usage; exit 0
    ;;
  -V|--version)
    print_version; exit 0
    ;;
  -v|--verbose)
    export VERBOSE=1
    ;;
  -c|--check-crm)
    export CRM_CHECK=1
    ;;
  -M|--metadata)
		run_agent meta-data
  	;;
  -C|--validate-all)
		run_agent validate-all "$2"; shift
  	;;
  -m|--monitor)
		run_agent monitor "$2"; shift
  	;;
  -s|--status)
		run_agent status "$2"; shift
  	;;
  -A|--start)
		run_agent start "$2"; shift
  	;;
  -Z|--stop)
		run_agent stop "$2"; shift
  	;;
  -R|--reload)
		run_agent reload "$2"; shift
  	;;
  -r|--run)
		run_agent "$3" "$2"; shift 2
  	;;
  -p|--param)
		agent_args="$agent_args OCF_RESKEY_${2%%=*}=${2#*=} "; shift
  	;;
  --)
    break
    ;;
  *)
    echo "Internal Error: option processing error: $1" 1>&2
    exit 1
    ;;
esac
shift
done

