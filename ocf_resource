#!/bin/sh
#
# A tool to invoke OCF resource agents directly.
#
# http://github.com/joekhoobyar/ha-tools
#
# Author:		Joe Khoobyar <joe@ankhcraft.com>
# License:	GNU General Public License (GPL) version 2
# Copyright (c) 2009 All Rights Reserved
#

version=0.1
progname=$(basename $0)

: ${HA_TOOLS_SHARE=$(dirname $0)}
: ${CIBADMIN=$(which cibadmin 2>/dev/null)}
[ -z "$CIBADMIN" ] && CIBADMIN=/usr/sbin/cibadmin
if uname -m | grep -q 64; then
	LRMADMIN=${CIBADMIN%/*/cibadmin}/lib64/heartbeat/lrmadmin
else
	LRMADMIN=${CIBADMIN%/*/cibadmin}/lib/heartbeat/lrmadmin
fi

print_usage() {
	if [ -x "$agent_bin" ]; then
		$agent_bin help
	else
    cat <<EOF
Usage: $progname resource-agent [options] command [resource-id]
       $progname [resource-primitive] [options] command

A tool to invoke OCF resource agents directly.

resource-agent:       fully-qualified resource agent name (i.e. heartbeat/IPaddr2)
resource-primitive:   any one of the following..
  -g, --from-crm {id}           read resource agent configuration from the CRM
  -l, --from-lrm                read resource agent configuration from the LRM
	-x, --xml-file {xml} {id}     read resource agent configuration from a file
	-X, --xml-string {xml} {id}   read resource agent configuration from a string

Options:
  -h, --help          print this usage message
  -V, --version       print program version
  -v, --verbose       verbose output
  -p, --param         OCF parameters, in the form:  name="value"

Commands:

  -M, --metadata      display the resource agent's metadata
  -C, --validate-all  validate the resource and it's configuration
  -m, --monitor       monitor the resource
  -s, --status        check the resource's status, a la an LSB initscript
  -A, --start         stop the resource
  -Z, --stop          start the resource
  -R, --reload        gracefully reload the resource
  -r, --run {cmd}     run arbitrary command {cmd} on this resource

EOF
print_version
	fi
}

print_version()
{
    cat <<EOF
$progname (ha-tools) $version
Copyright (C) 2009 All Rights Reserved
Written by Joe Khoobyar <joe@ankhcraft.com>
EOF
}

print_error() {
	echo "$progname: error -" "$@" 1>&2
}

print_warning() {
	echo "$progname: warning -" "$@" 1>&2
}

die() {
	print_error "$@"
	exit 1
}

parse_cib_primitive_xml() {
	resource="$2"
	if [ -z "$resource" ] || [ "${resource:0:1}" == "-" ]; then
		print_usage; exit 1
	fi
	shift
	agent_args=$(echo "$1" | xsltproc --stringparam resource-id "$resource" $HA_TOOLS_SHARE/resource2shell.xslt -)
	[ "$(echo -n $agent_args)" = "OCF_RESOURCE_INSTANCE=\"$resource\"" ] && die "no such resource: $resource"
	agent_bin=$(eval echo ${agent_args##* })
	agent_args=$(eval echo ${agent_args% *})
}

parse_lrmadmin_output() {
	resource="$1"
	if [ -z "$resource" ] || [ "${resource:0:1}" == "-" ]; then
		print_usage; exit 1
	fi
	shift
	agent_args=$($LRMADMIN -I "$resource")
	echo $agent_args | fgrep -qv "Resource ID:$resource Resource agent class:ocf" && die "no such CRM resource: $resource"
	agent_bin=$(echo $agent_args | sed -e 's@^.*Resource agent type:\([^ ]\+\).*$@\1@g')
	agent_bin="$OCF_BIN/$(echo $agent_args | sed -e 's@^.*Resource agent provider:\([^ ]\+\).*$@\1/@g')$agent_bin"
	agent_args=$($LRMADMIN -I "$resource" | sed -ne 's@  \+\([^ ]\)@" "OCF_RESKEY_\1@g; s@^Resource agent parameters: *\([^ ].*\) *$@"OCF_RESKEY_\1"@p;')'  "OCF_RESOURCE_INSTANCE='$resource'"'
	agent_args=$(eval echo $agent_args)
}

run_agent() {
	if [ -z "$2" ] || [ "${2##-*}" != "$2" ]; then
		[ -n "$CRM_CHECK" ] && die "option -c requires a resource instance name"
		env $agent_args $agent_bin $1
	elif [ "$1" != "status" ] && [ -n "$CRM_CHECK" ] && crm_resource -r "$2" -W -Q | grep -v $(crm_hostname); then
		print_warning "skipping $1: resource $2 is not running via the CRM"
	else
		env $agent_args OCF_RESOURCE_INSTANCE="$2" $agent_bin $1
	fi
}

: ${OCF_ROOT:=/usr/lib/ocf}
OCF_BIN=$OCF_ROOT/resource.d
export OCF_ROOT

# Check the resource agent for validity.  Try to auto-detect when not fully-qualified.
agent="$1"
shift
if [ -z "$agent" ] || [ "$agent" = "--help" ]; then
	print_usage; exit 1
elif [ "$agent" = "--from-crm" ] || [ "$agent" = "-g" ]; then
	parse_cib_primitive_xml "$($CIBADMIN -Q -o resources)" "$1"; shift
elif [ "$agent" = "--xml-string" ] || [ "$agent" = "-X" ]; then
	parse_cib_primitive_xml "$1" "$2"; shift 2
elif [ "$agent" = "--xml-file" ] || [ "$agent" = "-x" ]; then
	parse_cib_primitive_xml "$(cat $1)" "$2"; shift 2
elif [ "$agent" = "--from-lrm" ] || [ "$agent" = "-l" ]; then
	parse_lrmadmin_output "$1"; shift
elif [ "$agent" != "${agent##*::}" ]; then
	agent_bin="$OCF_BIN/${agent//:://}"
	[ -x "$agent_bin" ] || die "no such resource agent \`$agent'"
elif [ -x "$OCF_BIN/heartbeat/$agent" ]; then
	agent="heartbeat::$agent"
	print_warning "guessing fully-qualified resource agent name: $agent"
	agent_bin="$OCF_BIN/${agent//:://}"
else
	agent=$(find $OCF_BIN -maxdepth 2 -mindepth 2 -name IPaddr2 -not -type d | sed -ne 's@^/usr/lib/ocf/resource.d/\([^/]\+\)/@\1::@p' | head -1)
	[ -z "$agent" ] && die "no such resource agent: $agent"
	print_warning "guessing fully-qualified resource agent name: $agent"
	agent_bin="$OCF_BIN/${agent//:://}"
fi

SHORTOPTS="hVvg:l:cp:M::C:m::s::A::Z::r:R::"
LONGOPTS="help,version,verbose,from-crm:,from-lrm:check,param:,metadata::,validate-all:,monitor::,status::,start::,stop::,reload::,run:"
if $(getopt -T >/dev/null 2>&1) ; [ $? = 4 ] ; then # New longopts getopt.
    OPTS=$(getopt -o $SHORTOPTS --long $LONGOPTS -n "$progname" -- "$@")
else
    case $1 in --help) print_usage; exit 0 ;; esac
    case $1 in --version) print_version ; exit 0 ;; esac
    OPTS=$(getopt $SHORTOPTS "$@")
fi 

[ "$OPTS" = " --" ] && OPTS=" -h --"

eval set -- "${OPTS}"
retval=0

while [ $# -gt 0 ]; do
case $1 in
  -h|--help)
    print_usage; exit 0
    ;;
  -V|--version)
    print_version; exit 0
    ;;
  -v|--verbose)
    export VERBOSE=1
    ;;
  -c|--check-crm)
    export CRM_CHECK=1
    ;;
  -M|--metadata)
		run_agent meta-data; retval=$?
  	;;
  -C|--validate-all)
		run_agent validate-all "$2"; retval=$?; shift
  	;;
  -m|--monitor)
		run_agent monitor "$2"; retval=$?; shift
  	;;
  -s|--status)
		run_agent status "$2"; retval=$?; shift
  	;;
  -A|--start)
		run_agent start "$2"; retval=$?; shift
  	;;
  -Z|--stop)
		run_agent stop "$2"; retval=$?; shift
  	;;
  -R|--reload)
		run_agent reload "$2"; retval=$?; shift
  	;;
  -r|--run)
		run_agent "$2" "$3"; retval=$?; shift 2
  	;;
  -p|--param)
		if [ "${2:0:16}" = "OCF_CHECK_LEVEL=" ]; then
			agent_args="$agent_args OCF_CHECK_LEVEL=${2#*=} "; shift
		else
			agent_args="$agent_args OCF_RESKEY_${2%%=*}=${2#*=} "; shift
		fi
  	;;
  --|'')
    break
    ;;
  *)
    echo "Internal Error: option processing error: \`$1\'" 1>&2
    exit 1
    ;;
esac
shift
[ $retval -ne 0 ] && break
done

exit $retval
